#version 330 core
out vec4 color;

in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
} fs_in;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
  
uniform Material material;

struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform Light light; 

uniform sampler2D normalMap; 
uniform sampler2D dudvMap; 

//uniform vec3 lightPos; 
uniform vec3 viewPos;
uniform bool normalMapping;

const float waveStrength = 0.04;
uniform float moveFactor;


void main()
{
	vec3 normal = normalize(fs_in.Normal);
	vec2 distortion = (texture(dudvMap, fs_in.TexCoords +vec2(moveFactor, moveFactor * 2.0)).rg * 2.0 - 1.0) * waveStrength;
	if(normalMapping)
	{
		
		vec2 newTexCoords = fs_in.TexCoords + distortion;

	    // Obtain normal from normal map in range [0,1]
        vec4 normalMapColor = texture(normalMap, newTexCoords);
        // Transform normal vector to range [-1,1]
        normal = vec3(normalMapColor.r *2.0 - 1.0, normalMapColor.b, normalMapColor.g *2.0 -1.0);   
		normal = normalize(normal);

	}

    // Ambient
    vec3 ambient = light.ambient * material.ambient;

    // Diffuse 
    //vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light.position - fs_in.FragPos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 diffuse = light.diffuse * (diff * material.diffuse);
    
    // Specular
    vec3 viewDir = normalize(viewPos - fs_in.FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular = light.specular * ( diff * spec * material.specular) ;  
        
    vec3 result = (ambient + diffuse + specular);
    color = vec4(result, 1.0f);
} 