#version 330 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoords;

out VS_OUT {
    vec3 FragPos;
	vec3 TexCoords3d;

    vec3 Normal;
    vec2 TexCoords;
	
} vs_out;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

const float tiling = 6.0;
uniform float time;
uniform float moveFactor;
const float waveSpeedFactor = 20.0f;


void main()
{
	//vs_out.Normal = normal;
	vs_out.TexCoords = vec2(texCoords.x/2.0 + 0.5, texCoords.y/2.0 + 0.5) * tiling; //range
	
	vs_out.FragPos = vec3(model * vec4(position, 1.0));
	vs_out.TexCoords3d = vec3(texCoords.x,texCoords.y, 1.0);//position;

	//  normal
	vs_out.Normal = normalize(normal);
    
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vs_out.Normal = normalMatrix * vs_out.Normal;

	// texture surface
    vs_out.TexCoords3d = vec3(model * vec4(vs_out.TexCoords3d, 1.0));

	//distort with time
	vs_out.TexCoords3d -= vec3(time/(2.0* waveSpeedFactor), time/waveSpeedFactor, time/(2.0*waveSpeedFactor));

	gl_Position = projection * view * model * vec4(position, 1.0f);

} 


